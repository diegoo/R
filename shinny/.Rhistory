#print(as.list(match.call())[-1])
# api.args <- lapply(as.list(match.call())[-1], eval)
#print(api.args)
api.args<-list()
if(!is.null(full_address))
api.args$full_address <- full_address
if(!is.null(max_results))
api.args$max_results <- max_results
ua <-
get_cartociudad_user_agent()
res <- if (!missing(full_address)){
api.args$address <- full_address
GET("http://www.cartociudad.es/CartoGeocoder/Geocode", query = api.args, ua)
}
else
GET("http://www.cartociudad.es/CartoGeocoder/GeocodeAddress", query = api.args, ua)
stop_for_status(res)
res <- content(res, as = "text")
res <- jsonlite::fromJSON(res, simplifyDataFrame = TRUE)
res$result
}
dire <- "Calle Alcalá 145, Madrid"
cartociudad_geocode2(dire, max_results = 1)
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))
merge(df1, df2, by = "CustomerId")
df1
df2
merge(df1, df2, by = "CustomerId")
suppressPackageStartupMessages(library(dplyr))
installed.packages("dplyr")
install.packages("dplyr")
c(1:6)
data.frame(ClienteId = c(1:3), RazonSocial = c("Cliente 1", "Cliente2", "Cliente 3"))
clientes = data.frame(ClienteId = c(1:3),
RazonSocial = c("Cliente 1", "Cliente 2", "Cliente 3"),
Provincia = c(1,2,1))
clientes
clientes = data.frame(ClienteId = c(1:3),
RazonSocial = c("Cliente 1", "Cliente 2", "Cliente 3"),
ProvinciaId = c(1,2,1))
provincias = data.frame(ProvinciaId = c(1, 2, 3),
Nombre = c("Capital","Buenos Aires","Entre Ríos"))
merge(clientes, provincias, by = "ProvinciaId")
merge(provincias, clientes, by = "ProvinciaId")
merge(x = clientes, y = provincias, by = "ProvinciaId", all = TRUE)
merge(x = provincias, y = clientes, by = "ProvinciaId", all = TRUE)
clientes = data.frame(ClienteId = c(1:4),
RazonSocial = c("Cliente 1", "Cliente 2", "Cliente 3", "Cliente 4"))
ventas = data.frame(ClienteId = c(1, 2, 3),
Monto = c(110, 50, 60))
merge(x = clientes, y = ventas, by = "ClienteId")
merge(x = ventas, y = clientes, by = "ClienteId")
merge(x = clientes, y = ventas, by = "ClienteId", all = TRUE)
merge(x = ventas, y = clientes, by = "ClienteId", all = TRUE)
ventas = data.frame(ClienteId = c(1, 2, 3, 5),
Monto = c(110, 50, 60, 90))
# inner join
merge(x = clientes, y = ventas, by = "ClienteId")
merge(x = ventas, y = clientes, by = "ClienteId")
# outer join
merge(x = clientes, y = ventas, by = "ClienteId", all = TRUE)
merge(x = ventas, y = clientes, by = "ClienteId", all = TRUE)
merge(x = clientes, y = ventas, by = "ClienteId", all.x = TRUE)
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.x = TRUE)
df[is.na(df)] <- 0
df
# right join
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df
# right join
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df[is.na(df)] <- "Sin cliente"
df
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df
df[is.na(df)] <- "Sin cliente"
df[is.na(df)] <- as.factor("Sin cliente")
df
df[is.na(df)] <- levels("Sin cliente")
df
addNA(df)
df <- as.factor(ifelse(is.na(df), "Sin cliente", df))
df <- as.factor(ifelse(is.na(df$RazonSocial), "Sin cliente", df))
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
levels(df)
str(df)
df
clientes
ventas
clientes
ventas
erge(x = clientes, y = ventas, by = "ClienteId")
merge(x = clientes, y = ventas, by = "ClienteId")
merge(x = clientes, y = ventas, by = "ClienteId", all = TRUE)
df
df[is.na(df)] <- "S/C"
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df[is.na(df)] <- "S/C"
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df[is.na(df)] <- "S/C"
levels(df)[is.na(df)] <- "Sin Cliente"
levels(df)
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
levels(df)
levels(df$RazonSocial)[is.na(df$RazonSocial)] <- "Sin Cliente"
df
df[is.na(df$RazonSocial)]
df[,is.na(df$RazonSocial)]
df$RazonSocial[is.na(df$RazonSocial)]
df
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
df
df$monto[is.na(df$monto)] <- 0
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.x = TRUE)
df
df$Monto[is.na(df$Monto)] <- 0
df
# right join
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
df
df$RazonSocial[is.na(df$RazonSocial)]
addNA(df)
df <- as.factor(ifelse(is.na(df$RazonSocial), "Sin cliente", df))
levels(df)[levels(df)==NA] <- "two"
df
levels(df)[is.na(levels(df))] <- "two"
df
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
levels(df)[is.na(levels(df))] <- "two"
levels(df)
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df$RazonSocial <- as.character(df$RazonSocial)
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
df$RazonSocial <- factor(df$RazonSocial)
df
df <-merge(x = clientes, y = ventas, by = "ClienteId", all.y = TRUE)
df
df$RazonSocial <- as.character(df$RazonSocial)
df$RazonSocial[is.na(df$RazonSocial)] <- "Sin Cliente"
df$RazonSocial <- factor(df$RazonSocial)
df
merge(x = clientes, y = ventas, by = NULL)
Data(Lock5Data)
data(Lock5Data)
library(Lock5Data)
data(cereal)
data(Cereal)
require(Lock5Data)
data(Cereal)
data(cereal)
data("cereal")
data("Cereal")
require(Lock5Data)
install.packages("Lock5Data")
require(Lock5Data)
data("Cereal")
Cereal
Cereales20 <- function(Cereal, name) {
return(Cereal[Cereal$Name == name,])
}
Cereales20(Cereal, name == "AppleJacks")
Cereal[Cereal$Name == "AppleJacks",]
Cereales20(Cereal, name = "AppleJacks")
Cereales20(Cereal, name = "AppleJacks1")
Cereales20 <- function(Cereal, name) {
return(Cereal[Cereal$Name == name,c("Company","Calories")])
}
Cereales20(Cereal, name = "AppleJacks")
Cereales20 <- function(Cereal, name) {
return(Cereal[Cereal$Name == name,c("Name","Company","Calories")])
}
Cereales20(Cereal, name = "AppleJacks")
bases <- c("A","G","C","T")
P <- runif(1,0,1) # Valor de probabilidad de que ocurra un base, único para
P
P <- runif(1,0,3)
runif(1,0,3)
runif(1,0,1)
runif(1,0,10)
set.seed(1)
round(runif(10,1,100))
runif(10,1,100)
runif(1,0,10)
runif(1,0,100)
runif(10,0,1)
runif(c("A","G","C","T"))
aggregate(ADN)
ADN <- sample(bases,size = 21,replace = TRUE,prob = c(P,P,P,P))
aggregate(ADN)
nueva_version <- function(adn, bases) {
for (base in adn){
posibles = bases[!bases == base]
print(paste0(base, ": ", posibles)
}
nueva_version <- function(adn, bases) {
for (base in adn) {
posibles = bases[!bases == base,]
print(paste0(base, ": ", posibles)
}
nueva_version <- function(adn, bases) {
for (base in adn) {
posibles = bases[!bases == base,]
print(paste0(base, ": ", posibles))
}
)
nueva_version(ADN, bases)
nueva_version <- function(adn, bases) {
for (base in adn) {
posibles = bases[!bases == base]
print(paste0(base, ": ", posibles))
}
nueva_version(ADN, bases)
nueva_version <- function(adn, bases) {
for (base in adn) {
posibles = bases[!bases == base]
nuevo_adn = c(nuevo_adn,sample(posibles,1))
}
return(nuevo_adn)
}
nueva_version(ADN, bases)
nueva_version <- function(adn, bases) {
nuevo_adn = c()
for (base in adn) {
posibles = bases[!bases == base]
nuevo_adn = c(nuevo_adn,sample(posibles,1))
}
return(nuevo_adn)
}
nueva_version(ADN, bases)
print(ADN)
print(nueva_version(ADN, bases))
print(ADN)
print(nueva_version(ADN, bases))
length(ADN)
sample(1,21, 2)
runif(1,21, 2)
runif(1,21)
runif(21)
runif(1,1,21)
runif(1,2,21)
runif(2,1,21)
as.integer(runif(2,1,21))
nueva_version <- function(adn, bases, porcentaje) {
nuevo_adn <- bases
l <- lenght(adn)
change <- as.integer(runif(as.integer(l*porcentaje/100),1,l))
for (i in change) {
posibles = bases[!bases == base]
nuevo_adn[i] <- sample(posibles,1)
}
return(nuevo_adn)
}
print(ADN)
print(nueva_version(ADN, bases))
nueva_version <- function(adn, bases, porcentaje) {
nuevo_adn <- bases
l <- length(adn)
change <- as.integer(runif(as.integer(l*porcentaje/100),1,l))
for (i in change) {
posibles = bases[!bases == base]
nuevo_adn[i] <- sample(posibles,1)
}
return(nuevo_adn)
}
print(ADN)
print(nueva_version(ADN, bases))
print(ADN)
print(nueva_version(ADN, bases,10))
bases
nueva_version <- function(adn, bases, porcentaje) {
nuevo_adn <- adn
l <- length(adn)
change <- as.integer(runif(as.integer(l*porcentaje/100),1,l))
for (i in change) {
posibles = bases[!bases == adn[i]]
nuevo_adn[i] <- sample(posibles,1)
}
return(nuevo_adn)
}
print(ADN)
print(nueva_version(ADN, bases,10))
print(ADN)
print(nueva_version(ADN, bases,10))
print(ADN)
print(nueva_version(ADN, bases,10))
print(ADN)
print(nueva_version(ADN, bases,10))
install.packages("FactoClass")
library("FactoClass")
library(FactoClass)
data(ColorAdjective)
installed.packages("data.table")
DF = data.frame(A=1:3, B=c("foo","A,Name","baz"))
fwrite(DF)
library("data.table")
fwrite(DF)
write.csv(DF, row.names=FALSE, quote=FALSE)
write.csv(DF, file="test.csv", row.names=FALSE, quote=FALSE)
fread(DF2, file="test.csv")
df2 <- fread(file="test.csv")
View(df2)
df2 <- fread(file="test.csv")
df3 <- fread(file="test.csv")
df3
df3 <- fread(file="test.csv")
df3 <- fread(file="test.csv", fill=TRUE)
df3
View(Cereal)
fwrite(Cereal, file="test.csv", col.names=TRUE, quote=FALSE)
df <- fread(file="test.csv")
df
df2 <- fread(file="test.csv")
df2
df2 <- fread(file="test.csv", fill=TRUE)
df <- fread(file="test.csv", fill=TRUE)
head(df)
df <- fread(file="test.csv", fill=TRUE, quote="\"")
df
df <- fread(file="test.csv", fill=TRUE, quote="\"")
df
fwrite(df, file="test.csv", quote="\"")
fwrite(df, file="test.csv", quote=TRUE)
df <- fread(file="test.csv")
View(df)
iris.csv <- tempfile(pattern = "train", tmpdir = ice_root, fileext = "csv")
ice_root = "/home/pmoracho/Tmp/H2o"
iris.csv <- tempfile(pattern = "train", tmpdir = ice_root, fileext = "csv")
iris.csv
write.csv(iris, file=iris.csv)
ice_root = "/home/pmoracho/Tmp/H2o"
train.csv <- tempfile(pattern = "train", tmpdir = ice_root, fileext = "csv")
write.csv(train, file=train.csv)
format(object.size(train), units="Mb")
train
n <- 10
train <- do.call("rbind", replicate(n, train, simplify = FALSE))
format(object.size(train), units="Mb")
n <- 10
train <- do.call("rbind", replicate(n, train, simplify = FALSE))
format(object.size(train), units="Mb")
n <- 10
train <- do.call("rbind", replicate(n, train, simplify = FALSE))
format(object.size(train), units="Mb")
n <- 10
train <- do.call("rbind", replicate(n, train, simplify = FALSE))
format(object.size(train), units="Mb")
ice_root = "/home/pmoracho/Tmp/H2o"
train.csv <- tempfile(pattern = "train", tmpdir = ice_root, fileext = "csv")
write.csv(train, file=train.csv)
TRAIN_H20 <- h2o.importFile(file=train.csv, sep=",")
library(h2o)
TRAIN_H20 <- h2o.importFile(file=train.csv, sep=",")
train.csv
ice_root = "/home/pmoracho/Tmp/H2o"
train.csv <- tempfile(pattern = "train", tmpdir = ice_root, fileext = ".csv")
write.csv(train, file=train.csv)
TRAIN_H20 <- h2o.importFile(file=train.csv, sep=",")
TRAIN_H20 <- h2o.importFile(train.csv, sep=",")
h2o.init(nthreads=-1, max_mem_size = "1g", ice_root = "/home/pmoracho/Tmp/H2o")
TRAIN_H20 <- h2o.importFile(train.csv, sep=",")
txt <- "Name V1   V2
ABCD L21A J32F
JKLM P21B R52L
OPQR K31A L23P"
df <- as.data.frame(read.table(textConnection(txt), header=TRUE, sep=' '))
txt <- "Name,V1,V2
ABCD,L21A,J32F
JKLM,P21B,R52L
OPQR,K31A,L23P"
df <- as.data.frame(read.table(textConnection(txt), header=TRUE, sep=','))
df
txt1 <- "Name,V1,V2
ABCD,L21A,J32F
JKLM,P21B,R52L
OPQR,K31A,L23P"
txt2 <- "codigo,V1,V2
B.*C,verde,mediano
J.*K,azul,chico
Q.*R,Morado,grande"
df1 <- as.data.frame(read.table(textConnection(txt1), header=TRUE, sep=','))
df21 <- as.data.frame(read.table(textConnection(txt2), header=TRUE, sep=','))
df2 <- as.data.frame(read.table(textConnection(txt2), header=TRUE, sep=','))
)
merge(df2,df1,by=null)
merge(df2,df1,by=NULL)
merge(df2,df1,by=NULL)[grep(codigo, Name)]
merge(df2,df1,by=NULL)[grep(df1$codigo, df2$Name)]
df3 <-merge(df2,df1,by=NULL)
df3[grep(df1$codigo, df2$Name)]
df3[grep(df3$codigo, df3$Name)]
df3[grep(as.character(df3$codigo), df3$Name)]
df3[grep("Q.*R", df3$Name)]
df3[grep("Q.*R", df3$Name),]
df3[grep(df3Codigo, df3$Name),]
df3[grep(df3$Codigo, df3$Name),]
df3[grep(as.character(df3$Codigo), df3$Name),]
df3[grepl(as.character(df3$Codigo), df3$Name),]
df3[grep(df3$Codigo, df3$Name),]
df3[grep(df3$codigo, df3$Name),]
df3[grep(as.character(df3$codigo), df3$Name),]
df3[grepl(df3$codigo, df3$Name),]
df3[ifelse(grep(df3$codigo, df3$Name),TRUE, FALSE),]
df3[grep(df3$codigo, df3$Name),]
lapply(df3, function {return grep(df3$codigo, df3$Name)})
df3[which(grep(df3[,1],df3[,4]),]
df3[which(grep(df3[,1],df3[,4])),]
f<-function(x) merge(x,b[agrep(x$codigo[1],df2$Name),],all=TRUE)
do.call(rbind,by(df1,df1$codigo,f))
# I slightly modified your data to test multiple matches
a<-data.frame(aID=c("1234","1234","4567","6789","3645"),aInfo=c("blue","blue2","green","goldenrod","cerulean"))
b<-data.frame(bID=c("4567","(1234)","6789","23645","63528973"), bInfo=c("apple","banana","kiwi","pomegranate","lychee"))
f<-function(x) merge(x,b[agrep(x$aID[1],b$bID),],all=TRUE)
do.call(rbind,by(a,a$aID,f))
a
b
do.call(rbind,by(a,a$aID,f))
f<-function(x) merge(x,df2[agrep(x$Name[1],df2$codigo),],all=TRUE)
do.call(rbind,by(df1,df1$Name,f))
f<-function(x) merge(x,df1[agrep(x$Name[1],df2$codigo),],all=TRUE)
do.call(rbind,by(df1,df1$Name,f))
merge(x,df1[agrep(df1$Name[1],df2$codigo,], all=TRUE)
merge(x,df1[agrep(df1$Name[1],df2$codigo),], all=TRUE)
merge(df2,df1[agrep(df1$Name[1],df2$codigo),], all=TRUE)
merge(df1,df2[agrep(df1$Name[1],df2$codigo),], all=TRUE)
merge(df1,df2[agrep(df2$codigo[1],df1$Name),], all=TRUE)
df1
df2
merge(df1,df2[agrep(df2$codigo[1],df1$Name),], all=TRUE)
merge(df2,df1[agrep(df1$Name[1],df2$codigo),], by=TRUE)
merge(df2,df1[agrep(df1$Name[1],df2$codigo),], all=TRUE)
df3
df3[agrep(df3$codigo, df3$Name)]
df3[agrep(df3$codigo[1], df3$Name)]
df3[agrep(df3$codigo[2], df3$Name)]
df3$codigo[2]
df3$codigo[1]
df3[agrep(df3$codigo, df3$Name)]
df3[agrep(df3$codigo, df3$Name),]
a <- data.table(aID=c("1234","1234","4567","6789","3645","321", "321"),
aInfo=c("blue","blue2","green","goldenrod","cerulean",
"sarcoline","sarcoline2"),
key="aID")
library(data.table)
a <- data.table(aID=c("1234","1234","4567","6789","3645","321", "321"),
aInfo=c("blue","blue2","green","goldenrod","cerulean",
"sarcoline","sarcoline2"),
key="aID")
b <- data.table(bID=c("4567","(1234)","6789","23645","63528973"),
bInfo=c("apple","banana","kiwi","pomegranate","lychee"),
key="bID")
## Use agrep to get the rows of b by each aID from a
ab <- a[, b[agrep(aID, bID)], by=.(aID, aInfo)]
ab
df1[, df2[agrep(Name, codigo)]]
df1 <- as.data.table(read.table(textConnection(txt1), header=TRUE, sep=','))
df2 <- as.data.table(read.table(textConnection(txt2), header=TRUE, sep=','))
a <- as.data.table(read.table(textConnection(txt1), header=TRUE, sep=','))
b <- as.data.table(read.table(textConnection(txt2), header=TRUE, sep=','))
a[, b[agrep(Name, codigo)], by=.(Name)]
a
b
a[, b[agrep(Name, codigo)], by=.(Name)]
a[, b[agrep(codigo, Name)], by=.(Name)]
a[, b[agrep(Name, codigo)], by=.(Name, codigo)]
a[, b[agrep(Name, codigo)], by=.(Name, V1, V2)]
b[, a[agrep(codigo, Name)], by=.(codigo, V1, V2)]
df3
df3[apply(df3, 1, function(x) grepl(x[1], x[4])),]
merge(df2,df1[agrep(df1$Name[1],df2$codigo),], all=TRUE)[apply(df3, 1, function(x) grepl(x[1], x[4])),]
merge(df1,df2,by=NULL)
df1
df2
merge(df1,df2,by=NULL)
df1 <- as.data.frame(read.table(textConnection(txt1), header=TRUE, sep=','))
df2 <- as.data.frame(read.table(textConnection(txt2), header=TRUE, sep=','))
merge(df1,df2,by=NULL)
merge(df1,df2,by=NULL)[apply(df3, 1, function(x) grepl(x[1], x[4])),]
df3 <- merge(df1,df2,by=NULL)
df3 <- df3[apply(df3, 1, function(x) grepl(x[1], x[4])),]
df3
df3 <- merge(df1,df2,by=NULL)
df3
df3[apply(df3, 1, function(x) grepl(x[1], x[4])),]
df3[apply(df3, 1, function(x) grepl(x[4], x[1])),]
txt1 <- "Name,V1,V2
ABCD,L21A,J32F
JKLM,P21B,R52L
OPQR,K31A,L23P
AXXX,L21A,J32F
AXJK,L21A,J32F
"
df1 <- as.data.frame(read.table(textConnection(txt1), header=TRUE, sep=','))
df2 <- as.data.frame(read.table(textConnection(txt2), header=TRUE, sep=','))
df3 <- merge(df1,df2,by=NULL)
df3
df3[apply(df3, 1, function(x) grepl(x[4], x[1])),]
install.packages("shiny")
setwd("~/Proyectos/R/shinny")
library(shiny); source('app1/app.R')
source('app1/app.R')
source('~/Proyectos/R/shinny/app1/app.R', echo=TRUE)
source('app1/app.R')
runApp('app1')
source('app1/app.R')
install.packages("DT")
source('app1/app.R')
